//方法一：利用String累加,执行用时,内存消耗如下：243 ms,218.7 MB(耗时相当大,不建议使用)
public String reverseWords(String s) {
        String result="";
        String[] str=s.split(" ");
        for(int i=0;i<str.length;i++){
            String tmp="";
            for(int j=str[i].length()-1;j>=0;j--){
                tmp=tmp+""+str[i].charAt(j);
            }
            System.out.println("tmp:"+tmp);
            if(i!=str.length-1){
                result=result+tmp+" ";
            }else{
                result=result+tmp;
            }
        }
        System.out.println("result:"+result);
        return result;
    }

//方法二：利用StringBuilder累加，特别注意：最后一个单词不需要加空格;执行用时,内存消耗如下：20ms,49.2MB(比方法一快且内存消耗说少很多)
public String reverseWords(String s) {
        String[] str_arr=s.split(" ");
        StringBuilder stringBuilder=new StringBuilder();
        for(int j=0;j<str_arr.length;j++){
//            System.out.println("str:"+str_arr[j]);
            for(int i=str_arr[j].length()-1;i>=0;i--){
                char ch=str_arr[j].charAt(i);
                stringBuilder.append(ch);
            }
//            System.out.println("stringBuilder:"+stringBuilder);
            if(j!=str_arr.length-1) stringBuilder.append(" ");
//            System.out.println("stringBuilder:"+stringBuilder);
        }
        return stringBuilder.toString();
    }

//方法三:利用StringBuffer累加，执行用时,内存消耗如下：27ms,48.8MB(比方法二慢,StringBuffer效率低,但是是线程安全,适合多线程场景)
 public String reverseWords(String s) {
       String[] str_arr=s.split(" ");
        StringBuffer stringBuffer=new StringBuffer();
        for(int j=0;j<str_arr.length;j++){
//            System.out.println("str:"+str_arr[j]);
            for(int i=str_arr[j].length()-1;i>=0;i--){
                char ch=str_arr[j].charAt(i);
                stringBuffer.append(ch);
            }
//            System.out.println("stringBuilder:"+stringBuilder);
            if(j!=str_arr.length-1) stringBuffer.append(" ");
//            System.out.println("stringBuilder:"+stringBuilder);
        }
        return stringBuffer.toString();
    }
    
    
//方法四:利用StringBuilder+reverse,执行用时,内存消耗如下：16ms,49.2MB
public String reverseWords(String s) {
        String[] str_arr=s.split(" ");
        StringBuilder stringBuilder=new StringBuilder();
        for(int i=0;i<str_arr.length;i++){
            StringBuilder stringBuilder1=new StringBuilder();
            stringBuilder1.append(str_arr[i]);
            stringBuilder1.reverse();
            stringBuilder.append(stringBuilder1);
            if(i!=str_arr.length-1) stringBuilder.append(" ");
        }
        return stringBuilder.toString();
    }

//方法五:方法四的简化版本,执行用时,内存消耗和方法四一致
public String reverseWords(String s) {
        String[] str_arr=s.split(" ");
        StringBuilder stringBuilder=new StringBuilder();
        for(String str:str_arr){
            stringBuilder.append(new StringBuilder(str).reverse()).append(" ");
        }
        return stringBuilder.toString().trim();
    }
