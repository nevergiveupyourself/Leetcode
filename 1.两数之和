//方法一：2个for循环
public int[] twoSum(int[] nums, int target) {
        int[] result=new int[2];
        for(int i=0;i<nums.length-1;i++){
            for(int j=i+1;j<nums.length;j++){
                if(nums[i]+nums[j]==target){
                    result[0]=i;
                    result[1]=j;
                    return result;
                }
            }
        }
        return null;
    }
    
//方法二：方法一的优化版本
for(int i=0;i<nums.length-1;i++){
            for(int j=i+1;j<nums.length;j++){
                if(nums[i]+nums[j]==target){
                    return new int[]{i,j};
                }
            }
        }
        throw new IllegalArgumentException("no two sum solution");
        
//方法三：二遍哈希表(hashmap),如果使用hashMap.put(序号,数组值),则使用hashMap.get(数组值)返回null,应该用hashMap.get(序号).然而我们需要获取的是序号值，
//所以,应该使用hashMap.put(数组值,序号).

//(1)方法三,错误示范
public int[] twoSum(int[] nums, int target) {
        HashMap<Integer,Integer> hashMap=new HashMap<>();
        for(int i=0;i<nums.length;i++){
            hashMap.put(i,nums[i]);
        }
        for(int i=0;i<nums.length;i++){
            int temp=target-nums[i];
            System.out.println(hashMap.containsValue(temp)+"+"+hashMap.get(temp));
            if(hashMap.containsValue(temp) && (hashMap.get(temp)!=i)){
                System.out.println(hashMap.containsValue(temp)+"+"+hashMap.get(temp));
                return new int[]{i,hashMap.get(temp)};
            }
        }
        throw new IllegalArgumentException("no two sum solution");
    }
//(2)方法三,正确示范,应该使用hashMap.put(数组值,序号),以及hashMap.get(数组值)
public int[] twoSum(int[] nums, int target) {
        HashMap<Integer,Integer> hashMap=new HashMap<>();
        for(int i=0;i<nums.length;i++){
            hashMap.put(nums[i],i);
        }
        for(int i=0;i<nums.length;i++){
            int temp=target-nums[i];
            //System.out.println(hashMap.containsKey(temp)+"+"+hashMap.get(temp));
            if(hashMap.containsKey(temp) && (hashMap.get(temp)!=i)){
                //System.out.println(hashMap.containsKey(temp)+"+"+hashMap.get(temp));
                return new int[]{i,hashMap.get(temp)};
            }
        }
        throw new IllegalArgumentException("no two sum solution");
    }
    
//方法四：一遍哈希表(hashmap)
 public int[] twoSum(int[] nums, int target) {
        HashMap<Integer,Integer> hashMap=new HashMap<>();
        for(int i=0;i<nums.length;i++){
            //hashMap.put(nums[i],i);hashMap必须放在后面;理由有2点:(1)要if判断之后再put,以避免重复利用同样的值,比如a[0]和a[0].所以
            //hashMap.get(temp)!=i不需要判断了
            //(2)nums={3,3},target=6,会出现异常.
            int temp=target-nums[i];
            //System.out.println(hashMap.containsKey(temp)+"+"+hashMap.get(temp));
            if(hashMap.containsKey(temp)){
                //System.out.println(hashMap.containsKey(temp)+"+"+hashMap.get(temp));
                return new int[]{hashMap.get(temp),i};
            }
            hashMap.put(nums[i],i);
        }
        throw new IllegalArgumentException("no two sum solution");
    }
