//方法一：利用ArrayList<HashMap>,耗时56ms
public List<String> commonChars(String[] A) {
       ArrayList<HashMap> list=new ArrayList<>(A.length);
        for(int i=0;i<A.length;i++){
            HashMap<Character,Integer> hashMap=new HashMap<>();
            String str=A[i];
            for(int j=0;j<str.length();j++){
                char ch=str.charAt(j);
                if(hashMap.containsKey(ch)){
                    hashMap.put(ch,hashMap.get(ch)+1);
                }else{
                    hashMap.put(ch,1);
                }
            }
            list.add(hashMap);
        }
        Set<Character> set=list.get(0).keySet();
        List<String> result_list=new ArrayList<>();

        for(Character ch:set){
            int min=(int) list.get(0).get(ch);
            for(int k=1;k<list.size();k++){
                if(list.get(k).get(ch)!=null){
                    int count= (int) list.get(k).get(ch);
                    min=Math.min(min,count);
                }else{
                    min=Integer.MAX_VALUE;
                    break;
                }
            }
            if(min!=Integer.MAX_VALUE){
                for(int i=0;i<min;i++){
                    result_list.add(ch.toString());
                }
            }
        }
        return result_list;
    }

//方法二,利用List<List>,耗时34ms
public List<String> commonChars1(String[] A) {
       List<List> list=new ArrayList<>();
        for(int i=0;i<A.length;i++){
            List<Character> characters=new ArrayList<>();
            for(int j=0;j<A[i].length();j++){
                characters.add(A[i].charAt(j));
            }
            list.add(characters);
        }
        List<String> list_str=new ArrayList<>();
        for(int i=0;i<A[0].length();i++){
            char ch=A[0].charAt(i);
            int j=0;
            for(j=1;j<A.length;){
                if(list.get(j).contains(ch)){
                    list.get(j).remove((Character)ch);
                    j++;
                }else{
                    break;
                }
            }
            if(j==A.length){
                list_str.add(ch+"");
            }
        }
        return list_str;
    }

//方法三，利用数组int[] ans=new int[26]存储26个字母在各个字符串中出现的最小次数(初始化为Integer.MAX_VALUE),利用Math.min来计算最小值
//然后返回List<String>.(运行耗时12ms)
public List<String> commonChars2(String[] A){
        int[] ans=new int[26];
        for(int i=0;i<26;i++){
            ans[i]=Integer.MAX_VALUE;
        }
        for(String str:A){
            int[] temp=new int[26];
            for(int i=0;i<26;i++){
                temp[i]=0;
            }
            for(int i=0;i<str.length();i++){
                char ch=str.charAt(i);
                temp[ch-'a']++;
            }
            for(int i=0;i<26;i++){
                ans[i]=Math.min(temp[i],ans[i]);
            }
        }
        List<String> list=new ArrayList<>();
        for(int i=0;i<26;i++){
            while(ans[i]>0){
                list.add((char)('a'+i)+"");
                ans[i]--;
            }
        }
        return list;
    }
