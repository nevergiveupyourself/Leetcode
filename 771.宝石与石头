//方法一：HashMap,耗时4ms,内存消耗34.9MB
public int numJewelsInStones(String J, String S) {
HashMap<Character,Integer> hashMap=new HashMap<>();
        for(int i=0;i<J.length();i++){
            char ch=J.charAt(i);
            hashMap.put(ch,0);
        }
        int numbers=0;
        for(int j=0;j<S.length();j++){
            char ch=S.charAt(j);
            if(hashMap.get(ch)!=null){
                numbers++;
            }
        }
        return numbers;
        }

//方法二：利用replace函数,耗时33ms,内存消耗37.8MB
public int numJewelsInStones(String J, String S) {
        String copy= S;
        for(int i=0;i<J.length();i++){
            copy=copy.replace(J.charAt(i)+"","");
        }
        //System.out.println("copy:"+copy);
        return S.length()-copy.length();
        }

//方法三：利用HashSet,耗时5ms,内存消耗35.1MB
public int numJewelsInStones(String J, String S) {
        HashSet<Character> hashSet=new HashSet<>();
        for(int i=0;i<J.length();i++){
            hashSet.add(J.charAt(i));
        }
        int number=0;
        for(int j=0;j<S.length();j++){
            if(hashSet.contains(S.charAt(j))){
                number++;
            }
        }
        return number;
    }
